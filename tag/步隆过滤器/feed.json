{
    "version": "https://jsonfeed.org/version/1",
    "title": "Plog • All posts by \"步隆过滤器\" tag",
    "description": "",
    "home_page_url": "https://penjc.github.io/plog",
    "items": [
        {
            "id": "https://penjc.github.io/plog/2025/01/02/middleware/bulong/",
            "url": "https://penjc.github.io/plog/2025/01/02/middleware/bulong/",
            "title": "步隆过滤器",
            "date_published": "2025-01-02T12:22:19.155Z",
            "content_html": "<h1 id=\"检查用户名是否存在\"><a class=\"anchor\" href=\"#检查用户名是否存在\">#</a> 检查用户名是否存在</h1>\n<h2 id=\"直接查询数据库请求用户名是否存在\"><a class=\"anchor\" href=\"#直接查询数据库请求用户名是否存在\">#</a> 直接查询数据库请求用户名是否存在。</h2>\n<h2 id=\"存在什么问题\"><a class=\"anchor\" href=\"#存在什么问题\">#</a> 存在什么问题？</h2>\n<ul>\n<li>海量用户如果查询的用户名存在或不存在，全部请求数据库，会将数据库直接打满。</li>\n</ul>\n<h3 id=\"检查用户名是否存在引起的问题\"><a class=\"anchor\" href=\"#检查用户名是否存在引起的问题\">#</a> 检查用户名是否存在引起的问题</h3>\n<h2 id=\"用户名加载缓存\"><a class=\"anchor\" href=\"#用户名加载缓存\">#</a> 用户名加载缓存</h2>\n<h3 id=\"第一版解决方案将数据库已有的用户名全部放到缓存里\"><a class=\"anchor\" href=\"#第一版解决方案将数据库已有的用户名全部放到缓存里\">#</a> 第一版解决方案，将数据库已有的用户名全部放到缓存里。</h3>\n<h3 id=\"该方案问题\"><a class=\"anchor\" href=\"#该方案问题\">#</a> 该方案问题：</h3>\n<ul>\n<li>是否要设置数据的有效期？只能设置为无效期，也就是永久数据。</li>\n<li>如果是永久不过期数据，占用 Redis 内存太高。</li>\n</ul>\n<h2 id=\"布隆过滤器\"><a class=\"anchor\" href=\"#布隆过滤器\">#</a> 布隆过滤器</h2>\n<h3 id=\"第二版解决方案使用布隆过滤器\"><a class=\"anchor\" href=\"#第二版解决方案使用布隆过滤器\">#</a> 第二版解决方案，使用布隆过滤器。</h3>\n<h3 id=\"什么是布隆过滤器\"><a class=\"anchor\" href=\"#什么是布隆过滤器\">#</a> 什么是布隆过滤器</h3>\n<p>布隆过滤器是一种数据结构，用于快速判断一个元素是否存在于一个集合中。具体来说，布隆过滤器包含一个位数组和一组哈希函数。位数组的初始值全部置为 0。在插入一个元素时，将该元素经过多个哈希函数映射到位数组上的多个位置，并将这些位置的值置为 1。</p>\n<ul>\n<li>1 字节（Byte）=8 位（Bit）</li>\n</ul>\n<p>在查询一个元素是否存在时，会将该元素经过多个哈希函数映射到位数组上的多个位置，如果所有位置的值都为 1，则认为元素存在；如果存在任一位置的值为 0，则认为元素不存在。</p>\n<h3 id=\"优缺点\"><a class=\"anchor\" href=\"#优缺点\">#</a> 优缺点</h3>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点：</h4>\n<ul>\n<li>高效地判断一个元素是否属于一个大规模集合。</li>\n<li>节省内存。</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点：</h4>\n<ul>\n<li>可能存在一定的误判。</li>\n</ul>\n<h3 id=\"布隆过滤器误判理解\"><a class=\"anchor\" href=\"#布隆过滤器误判理解\">#</a> 布隆过滤器误判理解</h3>\n<ul>\n<li>布隆过滤器要设置初始容量。容量设置越大，冲突几率越低。</li>\n<li>布隆过滤器会设置预期的误判值。</li>\n</ul>\n<h3 id=\"误判能否接受\"><a class=\"anchor\" href=\"#误判能否接受\">#</a> 误判能否接受</h3>\n<p>布隆过滤器的误判是否能够接受？</p>\n<p>答：可以容忍。为什么？因为用户名不是特别重要的数据，如果说我设置用户名为 aaa，系统返回我不可用，那我大可以在 aaa 的基础上再加一个 a，也就是 aaaa。</p>\n<h3 id=\"代码中使用布隆过滤器\"><a class=\"anchor\" href=\"#代码中使用布隆过滤器\">#</a> 代码中使用布隆过滤器</h3>\n<h4 id=\"引入-redisson-依赖\"><a class=\"anchor\" href=\"#引入-redisson-依赖\">#</a> 引入 Redisson 依赖</h4>\n<p><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.redisson<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"配置-redis-参数\"><a class=\"anchor\" href=\"#配置-redis-参数\">#</a> 配置 Redis 参数</h4>\n<p><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">redis:</span></span><br><span class=\"line\">      <span class=\"attr\">host:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">      <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">      <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建布隆过滤器实例\"><a class=\"anchor\" href=\"#创建布隆过滤器实例\">#</a> 创建布隆过滤器实例</h4>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RBloomFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.redisson.api.RedissonClient;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 布隆过滤器配置</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RBloomFilterConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 防止用户注册查询数据库的布隆过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RBloomFilter&lt;String&gt; <span class=\"title function_\">userRegisterCachePenetrationBloomFilter</span><span class=\"params\">(RedissonClient redissonClient)</span> &#123;</span><br><span class=\"line\">        RBloomFilter&lt;String&gt; cachePenetrationBloomFilter = redissonClient.getBloomFilter(<span class=\"string\">&quot;xxx&quot;</span>);</span><br><span class=\"line\">        cachePenetrationBloomFilter.tryInit(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cachePenetrationBloomFilter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>tryInit</code>  有两个核心参数：</p>\n<ul>\n<li><code>expectedInsertions</code> ：预估布隆过滤器存储的元素长度。</li>\n<li><code>falseProbability</code> ：运行的误判率。</li>\n</ul>\n<p>错误率越低，位数组越长，布隆过滤器的内存占用越大。</p>\n<p>错误率越低，散列 Hash 函数越多，计算耗时较长。</p>\n<p>一个布隆过滤器占用大小的在线网站：<a href=\"https://krisives.github.io/bloom-calculator/\">https://krisives.github.io/bloom-calculator/</a></p>\n<h4 id=\"使用布隆过滤器的两种场景\"><a class=\"anchor\" href=\"#使用布隆过滤器的两种场景\">#</a> 使用布隆过滤器的两种场景：</h4>\n<ul>\n<li>初始使用：注册用户时就向容器中新增数据，就不需要任务向容器存储数据了。</li>\n<li>使用过程中引入：读取数据源将目标数据刷到布隆过滤器。</li>\n</ul>\n<h4 id=\"代码中使用\"><a class=\"anchor\" href=\"#代码中使用\">#</a> 代码中使用</h4>\n<p><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RBloomFilter&lt;String&gt; userRegisterCachePenetrationBloomFilter;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"用户注册功能\"><a class=\"anchor\" href=\"#用户注册功能\">#</a> 用户注册功能</h2>\n<h3 id=\"如何防止用户名重复\"><a class=\"anchor\" href=\"#如何防止用户名重复\">#</a> 如何防止用户名重复？</h3>\n<p>通过布隆过滤器把所有用户名进行加载。这样该功能就能完全隔离数据库。</p>\n<h3 id=\"数据库层面添加唯一索引\"><a class=\"anchor\" href=\"#数据库层面添加唯一索引\">#</a> 数据库层面添加唯一索引。</h3>\n<h3 id=\"如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名\"><a class=\"anchor\" href=\"#如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名\">#</a> 如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？</h3>\n<p>因为用户名没注册，所以布隆过滤器不存在，代表着可以触发注册流程插入数据库。但是如果恶意请求短时间海量请求，这些请求都会落到数据库，造成数据库访问压力。这里通过分布式锁，锁定用户名进行串行执行，防止恶意请求利用未注册用户名将请求打到数据库</p>\n<p>。</p>\n<h3 id=\"如果恶意请求全部使用未注册用户名发起注册\"><a class=\"anchor\" href=\"#如果恶意请求全部使用未注册用户名发起注册\">#</a> 如果恶意请求全部使用未注册用户名发起注册</h3>\n<p><strong>结论：系统无法进行完全风控，只有通过类似于限流的功能进行保障系统安全。</strong></p>\n",
            "tags": [
                "步隆过滤器"
            ]
        }
    ]
}