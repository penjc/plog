<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://penjc.github.io/plog</id>
    <title>Plog • Posts by &#34;middleware&#34; category</title>
    <link href="https://penjc.github.io/plog" />
    <updated>2025-01-02T12:22:19.155Z</updated>
    <category term="JAVA" />
    <category term="步隆过滤器" />
    <entry>
        <id>https://penjc.github.io/plog/2025/01/02/middleware/bulong/</id>
        <title>步隆过滤器</title>
        <link rel="alternate" href="https://penjc.github.io/plog/2025/01/02/middleware/bulong/"/>
        <content type="html">&lt;h1 id=&#34;检查用户名是否存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查用户名是否存在&#34;&gt;#&lt;/a&gt; 检查用户名是否存在&lt;/h1&gt;
&lt;h2 id=&#34;直接查询数据库请求用户名是否存在&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直接查询数据库请求用户名是否存在&#34;&gt;#&lt;/a&gt; 直接查询数据库请求用户名是否存在。&lt;/h2&gt;
&lt;h2 id=&#34;存在什么问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存在什么问题&#34;&gt;#&lt;/a&gt; 存在什么问题？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;海量用户如果查询的用户名存在或不存在，全部请求数据库，会将数据库直接打满。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;检查用户名是否存在引起的问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检查用户名是否存在引起的问题&#34;&gt;#&lt;/a&gt; 检查用户名是否存在引起的问题&lt;/h3&gt;
&lt;h2 id=&#34;用户名加载缓存&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户名加载缓存&#34;&gt;#&lt;/a&gt; 用户名加载缓存&lt;/h2&gt;
&lt;h3 id=&#34;第一版解决方案将数据库已有的用户名全部放到缓存里&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一版解决方案将数据库已有的用户名全部放到缓存里&#34;&gt;#&lt;/a&gt; 第一版解决方案，将数据库已有的用户名全部放到缓存里。&lt;/h3&gt;
&lt;h3 id=&#34;该方案问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#该方案问题&#34;&gt;#&lt;/a&gt; 该方案问题：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;是否要设置数据的有效期？只能设置为无效期，也就是永久数据。&lt;/li&gt;
&lt;li&gt;如果是永久不过期数据，占用 Redis 内存太高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;布隆过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布隆过滤器&#34;&gt;#&lt;/a&gt; 布隆过滤器&lt;/h2&gt;
&lt;h3 id=&#34;第二版解决方案使用布隆过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第二版解决方案使用布隆过滤器&#34;&gt;#&lt;/a&gt; 第二版解决方案，使用布隆过滤器。&lt;/h3&gt;
&lt;h3 id=&#34;什么是布隆过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是布隆过滤器&#34;&gt;#&lt;/a&gt; 什么是布隆过滤器&lt;/h3&gt;
&lt;p&gt;布隆过滤器是一种数据结构，用于快速判断一个元素是否存在于一个集合中。具体来说，布隆过滤器包含一个位数组和一组哈希函数。位数组的初始值全部置为 0。在插入一个元素时，将该元素经过多个哈希函数映射到位数组上的多个位置，并将这些位置的值置为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 字节（Byte）=8 位（Bit）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在查询一个元素是否存在时，会将该元素经过多个哈希函数映射到位数组上的多个位置，如果所有位置的值都为 1，则认为元素存在；如果存在任一位置的值为 0，则认为元素不存在。&lt;/p&gt;
&lt;h3 id=&#34;优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优缺点&#34;&gt;#&lt;/a&gt; 优缺点&lt;/h3&gt;
&lt;h4 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;高效地判断一个元素是否属于一个大规模集合。&lt;/li&gt;
&lt;li&gt;节省内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;可能存在一定的误判。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;布隆过滤器误判理解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布隆过滤器误判理解&#34;&gt;#&lt;/a&gt; 布隆过滤器误判理解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;布隆过滤器要设置初始容量。容量设置越大，冲突几率越低。&lt;/li&gt;
&lt;li&gt;布隆过滤器会设置预期的误判值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;误判能否接受&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#误判能否接受&#34;&gt;#&lt;/a&gt; 误判能否接受&lt;/h3&gt;
&lt;p&gt;布隆过滤器的误判是否能够接受？&lt;/p&gt;
&lt;p&gt;答：可以容忍。为什么？因为用户名不是特别重要的数据，如果说我设置用户名为 aaa，系统返回我不可用，那我大可以在 aaa 的基础上再加一个 a，也就是 aaaa。&lt;/p&gt;
&lt;h3 id=&#34;代码中使用布隆过滤器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码中使用布隆过滤器&#34;&gt;#&lt;/a&gt; 代码中使用布隆过滤器&lt;/h3&gt;
&lt;h4 id=&#34;引入-redisson-依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引入-redisson-依赖&#34;&gt;#&lt;/a&gt; 引入 Redisson 依赖&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-redis&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.redisson&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;redisson-spring-boot-starter&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;配置-redis-参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#配置-redis-参数&#34;&gt;#&lt;/a&gt; 配置 Redis 参数&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;attr&#34;&gt;spring:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;data:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;attr&#34;&gt;redis:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;host:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;127.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;port:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;6379&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;attr&#34;&gt;password:&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;123456&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;创建布隆过滤器实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建布隆过滤器实例&#34;&gt;#&lt;/a&gt; 创建布隆过滤器实例&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.redisson.api.RBloomFilter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.redisson.api.RedissonClient;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.boot.context.properties.EnableConfigurationProperties;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Bean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; org.springframework.context.annotation.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; * 布隆过滤器配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta&#34;&gt;@Configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title class_&#34;&gt;RBloomFilterConfiguration&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     * 防止用户注册查询数据库的布隆过滤器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;meta&#34;&gt;@Bean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; RBloomFilter&amp;lt;String&amp;gt; &lt;span class=&#34;title function_&#34;&gt;userRegisterCachePenetrationBloomFilter&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(RedissonClient redissonClient)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RBloomFilter&amp;lt;String&amp;gt; cachePenetrationBloomFilter = redissonClient.getBloomFilter(&lt;span class=&#34;string&#34;&gt;&amp;quot;xxx&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cachePenetrationBloomFilter.tryInit(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; cachePenetrationBloomFilter;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tryInit&lt;/code&gt;  有两个核心参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expectedInsertions&lt;/code&gt; ：预估布隆过滤器存储的元素长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;falseProbability&lt;/code&gt; ：运行的误判率。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;错误率越低，位数组越长，布隆过滤器的内存占用越大。&lt;/p&gt;
&lt;p&gt;错误率越低，散列 Hash 函数越多，计算耗时较长。&lt;/p&gt;
&lt;p&gt;一个布隆过滤器占用大小的在线网站：&lt;a href=&#34;https://krisives.github.io/bloom-calculator/&#34;&gt;https://krisives.github.io/bloom-calculator/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;使用布隆过滤器的两种场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用布隆过滤器的两种场景&#34;&gt;#&lt;/a&gt; 使用布隆过滤器的两种场景：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;初始使用：注册用户时就向容器中新增数据，就不需要任务向容器存储数据了。&lt;/li&gt;
&lt;li&gt;使用过程中引入：读取数据源将目标数据刷到布隆过滤器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;代码中使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码中使用&#34;&gt;#&lt;/a&gt; 代码中使用&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;final&lt;/span&gt; RBloomFilter&amp;lt;String&amp;gt; userRegisterCachePenetrationBloomFilter;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;用户注册功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户注册功能&#34;&gt;#&lt;/a&gt; 用户注册功能&lt;/h2&gt;
&lt;h3 id=&#34;如何防止用户名重复&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何防止用户名重复&#34;&gt;#&lt;/a&gt; 如何防止用户名重复？&lt;/h3&gt;
&lt;p&gt;通过布隆过滤器把所有用户名进行加载。这样该功能就能完全隔离数据库。&lt;/p&gt;
&lt;h3 id=&#34;数据库层面添加唯一索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库层面添加唯一索引&#34;&gt;#&lt;/a&gt; 数据库层面添加唯一索引。&lt;/h3&gt;
&lt;h3 id=&#34;如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名&#34;&gt;#&lt;/a&gt; 如何防止恶意请求毫秒级触发大量请求去一个未注册的用户名？&lt;/h3&gt;
&lt;p&gt;因为用户名没注册，所以布隆过滤器不存在，代表着可以触发注册流程插入数据库。但是如果恶意请求短时间海量请求，这些请求都会落到数据库，造成数据库访问压力。这里通过分布式锁，锁定用户名进行串行执行，防止恶意请求利用未注册用户名将请求打到数据库&lt;/p&gt;
&lt;p&gt;。&lt;/p&gt;
&lt;h3 id=&#34;如果恶意请求全部使用未注册用户名发起注册&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#如果恶意请求全部使用未注册用户名发起注册&#34;&gt;#&lt;/a&gt; 如果恶意请求全部使用未注册用户名发起注册&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;结论：系统无法进行完全风控，只有通过类似于限流的功能进行保障系统安全。&lt;/strong&gt;&lt;/p&gt;
</content>
        <category term="步隆过滤器" />
        <updated>2025-01-02T12:22:19.155Z</updated>
    </entry>
</feed>
